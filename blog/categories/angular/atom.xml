<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Angular | Wow this blog looks fancy]]></title>
  <link href="http://jasonjl.me/blog/categories/angular/atom.xml" rel="self"/>
  <link href="http://jasonjl.me/"/>
  <updated>2015-06-21T20:06:15-07:00</updated>
  <id>http://jasonjl.me/</id>
  <author>
    <name><![CDATA[Jason Lee]]></name>
    <email><![CDATA[lee.jason930@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[6.82 Visualizer Postmortem]]></title>
    <link href="http://jasonjl.me/blog/2015/01/27/6-dot-82-visualizer-postmortem/"/>
    <updated>2015-01-27T16:22:06-08:00</updated>
    <id>http://jasonjl.me/blog/2015/01/27/6-dot-82-visualizer-postmortem</id>
    <content type="html"><![CDATA[<p><video muted autoplay loop width="550px" poster="https://s3.amazonaws.com/jasonjlblog/682visualizer.jpg">
    <source src="https://s3.amazonaws.com/jasonjlblog/682visualizer.mp4" type="video/mp4">
    <source src="https://s3.amazonaws.com/jasonjlblog/682visualizer.webm" type="video/webm">
    <img src="https://s3.amazonaws.com/jasonjlblog/682visualizer.jpg">
</video></p>

<p><a href="http://jasonjl.me/682Visualizer">website</a> <br/>
<a href="https://github.com/lee-jason/682Visualizer">source code</a></p>

<p>6.82 Visualizer is a gold and experience data visualizer (grapher) for the game Dota 2.  There was a controversial update to the game where the game would give the losing team drastic advantages so that they would be able to catch up to the leader. The changes are difficult to imagine due to the amount of variables so this program was created to show the data on how much the game had changed.</p>

<!-- more -->


<p></p>

<p>For those unfamiliar to the game of Dota, there are two teams of five that duke it out against each other to ultimately destroy their opponents base. Just like a real war, the way for a team to gain an advantage is to have more money, that&rsquo;s essentially what Dota&rsquo;s gold and experience is. Many members in the community were worried that the change to give the poorer team a boost to their economy would change their game for the worse. Many who were vocal about this had personal anecdotes but very few had the hard data. I sought to provide the community with the hard facts in an easy to view format of how the experience and gold were exactly affected so that we could see clearly just how much it altered the game.</p>

<h2>The Backend</h2>


<p>Backend? What backend? There actually is no backend to this site.  The entire application is self-contained in the html and js file.  The page is served through GitHub&rsquo;s project pages much like this blog you&rsquo;re reading.</p>

<h2>The Frontend</h2>


<p>The front end was built using a charting library <a href="http://www.chartjs.org/">chart.js</a> as well as <a href="https://angularjs.org/">angular.js</a> for the data binding. In the angular file, I have one controller for the form that maintains all the adjustable data. I knew that angular would be a good fit for this project since it very easily binds changeable data to the view. I also created a &lsquo;chart&rsquo; directive attribute tag. This chart directive contains code to initialize whatever element it was inserted into to become a chart. And finally I had one factory that contained all the formulas for calculating the data. I tried using as much as angular offered in intelligently splitting up the tasks of the site.</p>

<h2>The good, the bad</h2>


<p>This is actually the first site I made that was incredibly well received. Unlike my other sites, marketing this one was no problem. I posted it once on reddit/r/dota2 where it quickly rose through the ranks with nothing but positive praise. I felt very alive after receiving the first bits of feedback. I quickly continued to work after the initial release creating more graphs, more analysis, preset configurations, sharable configurations, layout changes (you can actually see the <a href="https://github.com/lee-jason/682Visualizer/commits/gh-pages">history here</a>). I keep realizing that community feedback really drives me forward and motivates me to a degree that I can&rsquo;t find anywhere else. Community figures were tweeting about my site, forums and fan pages in China, Germany and Russia were referring to my page, the page was being shared organically through Twitter and Facebook. It was actually quite amazing for me. I&rsquo;m really proud of the fact that I was finally first to market in something. Usually most of my ideas are imitations or alterations on an already existing idea, but this time I got lucky.</p>

<p>That&rsquo;s all well and good but of course there&rsquo;s some bad.  The bad is that the page is not optimized in a degree that I would be proud of. Granted, the application is very JavaScript heavy in the amount of calculation and redraws required from both the charting library and angular but playing with the sliders produces choppy animation. Optimizing that page to for its redraws to be at 60  frames per second was not my highest priority but it would be a good assignment to bury myself in (later). I&rsquo;m also a little ashamed that I wasn&rsquo;t able to produce a proper mobile/tablet view.  According to Google Analytics, about 10-15% of hits were coming in from tablets which is expected. I anticipated a mobile design view would have taken too much effort for it to be worth it. I could only have imagined a site redesign with unique scripts to support a program with this many charts, knobs, and buttons.</p>

<p>Well there you have it. Although this site might not be useful to you random reader but it definitely should be useful to the Dota 2 enthusiast.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Share Codes Postmortem]]></title>
    <link href="http://jasonjl.me/blog/2015/01/27/share-codes-postmortem/"/>
    <updated>2015-01-27T14:40:13-08:00</updated>
    <id>http://jasonjl.me/blog/2015/01/27/share-codes-postmortem</id>
    <content type="html"><![CDATA[<p><video muted autoplay loop width="550px" poster="https://s3.amazonaws.com/jasonjlblog/sharecodes.jpg">
    <source src="https://s3.amazonaws.com/jasonjlblog/sharecodes.mp4" type="video/mp4">
    <source src="https://s3.amazonaws.com/jasonjlblog/sharecodes.webm" type="video/webm">
    <img src="https://s3.amazonaws.com/jasonjlblog/sharecodes.jpg">
</video></p>

<p><a href="http://sharecodes.jasonjl.me">website</a> <br/>
<a href="https://github.com/lee-jason/ShareCodes">source code</a></p>

<p>Share Codes is a site for people to trade beta/alpha/early access codes. The premise is simple, people with codes post their email and people who want codes post their emails. Match made in heaven!</p>

<!-- more -->


<p></p>

<p>This site was originally created for people to share the early access demo code for the video game Super Smash Brothers for 3DS. Only a few privileged people were able to receive an early access code from Nintendo and had a few codes to share.  Internet communities across the web were going wild on searching for a spare code while those fortunate ones with the codes had the opportunity to get something in return for having such a rare commodity. I felt a site like this was needed to help people filter all the noise into something more digestible. The site was furiously written and released and it even helped some people find and give away codes.</p>

<h2>The Backend</h2>


<p>The backend was made with node with the express framework.  Once again I tried to make a proper REST API style endpoints that my front end would connect to. All emails are stored in mongodb through mongoose. The server has a scheduled timed function that prunes emails from the email list if the email is older than 30 minutes. That&rsquo;s it, there&rsquo;s nothing more interesting to say about the backend.</p>

<h2>The Frontend</h2>


<p>The front end was created with plain old html with the bootstrap framework for styling.  I don&rsquo;t really like using the bootstrap grid layout feature so I don&rsquo;t use that and make my own responsive layout using flexible containers and media queries. The form posting of the emails is not actually asynchronous. I know the experience would have probably been better if emails asynchronously updated without a page refresh but I haven&rsquo;t worked on a non-asynchronous site in so long that I really wanted to remind myself how to do it using traditional forms, actions, and methods.  Its funny, I&rsquo;m a developer born into the web 2.0 world that I have little project experience on how to do things in the web 1.0 world. I also wanted users to keep refreshing their pages to simulate heavy load to test how much strain a single Heroku dyno can take.</p>

<h2>The good, the bad</h2>


<p>The micro app was a blast to make. I knew that there was a time limit of relevancy since the codes would expire in a week. I churned this site out in around six hours just to see if I could. I think I felt that this would be kind of a proving ground whether I&rsquo;m comfortable enough with node to create a basic web application relatively quickly. Fortunately I was able to reuse the framework from my other node projects that already had the configurations I wanted.  The site worked and I felt really alive after I saw actual users on the site. I continued to make small improvements to the layout, adding extra fields, cleaning up text, making it responsive, all within the first hour of being live. If I wanted to generalize this, I can just swap out the title and make it apply for any kind of pre-access code sharing site.</p>

<p>So here&rsquo;s the bad. The bad involved the marketing. Once I was done, I sent it around to my friends, then I made a post on Reddit in the primary thread and any other thread involved in trading of codes. Unfortunately for me, these threads were already filled to the brim with people looking for codes. It was a storm of fish desperately trying to gobble the bait. I think it was the largest Reddit thread I&rsquo;ve seen at 20,000 comments since I last seen it. Every time I would make a post in a thread I would check the analytics and I was fortunate to even get a few bites. Someone even posted it on their Facebook wall thereby getting a few more bites. It was pretty swell, my site was actually being used by real people. Many of them posted their email looking for codes but nobody posted their email giving away their code. It was a seller&rsquo;s market at a rate of 1 seller to 50 buyers. Some users kept reposting their email when it got pruned but then eventually the site would be empty.</p>

<p>Well, there you have it. I&rsquo;m glad that some people were helped by the site, but it didn&rsquo;t spread even when I hopped around forums posting the link. I think the clarity of the share codes service is actually really helpful but when people are already ingrained in their communities it seems that they can&rsquo;t be bothered to use anything else.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quiz With Me Postmortem]]></title>
    <link href="http://jasonjl.me/blog/2015/01/27/quiz-with-me-postmortem/"/>
    <updated>2015-01-27T12:20:43-08:00</updated>
    <id>http://jasonjl.me/blog/2015/01/27/quiz-with-me-postmortem</id>
    <content type="html"><![CDATA[<p><video muted autoplay loop width="550px" poster="https://s3.amazonaws.com/jasonjlblog/quizwithme.jpg">
    <source src="https://s3.amazonaws.com/jasonjlblog/quizwithme.mp4" type="video/mp4">
    <source src="https://s3.amazonaws.com/jasonjlblog/quizwithme.webm" type="video/webm">
    <img src="https://s3.amazonaws.com/jasonjlblog/quizwithme.jpg">
</video></p>

<p><a href="http://quiz.jasonjl.me">website</a> <br/>
<a href="https://github.com/lee-jason/QuizWithMe">source code</a></p>

<p>Quiz With Me is a community generated trivia site. Each user competes against the people around the world to test themselves with the trivia questions that they submit. Quiz With Me brings the joy of answering and creating trivia questions vs the entire world!</p>

<!-- more -->


<p></p>

<p>Every player on Quiz With Me are all competing against each other directly in the same trivia game. Each player gets time to answer the same question as everyone else. Once time is up, the polls are tallied and users can compare their choice to those of their peers. Players can play anonymously or sign-up to keep track of their points. Each player can also submit their own multiple choice trivia question with at least four or more potential answers. Each question can also be judged by the community as to whether it is factually correct or just nonsensical BS.</p>

<h2>The Backend</h2>


<p>The backend is ran on node.js with the express framework with a mongo+mongoose persistence layer.  This is my second project working with node and I wanted to follow REST API guidelines when creating endpoints. You would think I would use socket.io again to create real-time experience but I really wanted to practice working on creating a RESTful API. Its funny, all API creation guides recommend making your server server-side content stateless.  The problem here is that I needed to synchronize all users to the server&rsquo;s state, the time remaining on the current question, and the question itself. I think its easy to create a stateless REST endpoints when dealing with normal documents, but when we&rsquo;re creating a game of sorts, its kind of assumed that we&rsquo;re going to be maintaining a state that all clients have to synchronize to right?</p>

<h2>The Frontend</h2>


<p>The front end is composed of a single index.html page that contains a bootstrapped themed skeleton and an angular.js app file that fills it all in.  The angular.js file has all the routes inside providers that asynchronously contact the server endpoints to get new questions, or handle logins and registrations, or create new questions. There&rsquo;s controllers for the questions segment, a controller for the poll segment, and controller for the header bar.  Each of these controllers does what angular does best which is watch for changes to objects inside the controller which automatically update the  tags in the front end. The page is also responsive in that the buttons and content will reorganize themselves based off the window size.  There&rsquo;s slight display issues regarding the header bar in the mobile view but I&rsquo;m generally happy with how I finally got to try out this new framework everyone <a href="http://larseidnes.com/2014/11/05/angularjs-the-bad-parts/">loves</a> <a href="https://medium.com/este-js-framework/whats-wrong-with-angular-js-97b0a787f903">to</a> <a href="http://www.thoughtworks.com/insights/blog/angularjs-bad-bits">hate</a>.</p>

<h2>The good, the bad</h2>


<p>Of course, competing with your friends and strangers across the world would be the most ideal scenario but the problem is the lack of a user base.  The site functions well with all the features of account management, question submission, question tribunal, in an acceptable presentation but all of this doesn&rsquo;t really matter unless someone is using it.  The design is also very bare. At this point I&rsquo;m happy that the functionality works as making the front end look polished was never the goal. The site suffers from terrible SEO due to the angular generated front end that dynamically fills in content. I tried to remedy this by adding an &lsquo;about&rsquo; light box describing the site but it doesn&rsquo;t seem to help. I&rsquo;m still unsure how to organically get hits for web applications like these without actually doing the work of marketing it first. Its making me believe that the new Google SEO algorithm is dependent heavily on public impression and how well it does on social network sites, Twitter, Facebook, Reddit and so on. The goal of this project was to continue working with node web applications and to get my feet wet with angular.  With the completion of this site, I feel like I graduated from the kiddy pool and ended up in the deep-end.</p>
]]></content>
  </entry>
  
</feed>
